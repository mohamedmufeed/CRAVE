<link rel="stylesheet" href="/admin/productManagement.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">


<aside class="sidebar">
  <div class="logo">
    <a class="navbar-brand" href="index.html">CRAV<span style="font-weight:lighter;">E</span></a>
  </div>
  <nav class="menu">
    <ul>
      <li><a href="/admin/dashboard">Dashboard</a></li>
       <li class="higlight"><a href="/admin/productManagement">Products</a></li>
        <li><a href="/admin/orderManagement">Orders</a></li>
        <li><a href="/admin/couponManagement">Coupon</a></li>
        <li><a href="/admin/inventory">Inventory</a></li>
        <li><a href="/admin/offerManagement">Offers</a></li>
    <li><a href="/admin/userManagement"> User Management</a></li>
      <li><a href="/admin/category"> Category</a></li>
         <li><a href="/admin/salesReport"> Sales Report</a></li>

    </ul>
  </nav>
</aside>

<div class="main-content">
  <header class="dashboard-header">
    <h1>Products Management</h1>
<div>
  <form class="form-inline my-2 my-lg-0" action="/admin/productManagement/search" method="GET">
    <input class="form-control mr-sm-2" type="search" name="search" placeholder="Search" aria-label="Search">
  </form>
</div>

  </header>
  <button class="add-btn" onclick="openProductModal()">Add Product</button>
{{#if products}}
  <section class="product-table">
    <p>All Products</p>
    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th>Image</th>
      
            <th>Name</th>
            <th>Category</th>

            <th>Stock</th>
            <th>Price</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {{#each products}}

          <tr>
            <td>

              <img src="/uploads/{{images.[0]}}" alt="Product Image" width="50" height="50">

            </td>
        
            <td>{{this.name}}</td>
            <td> {{this.category.name}}</td>
            <td>{{this.stock}}</td>
            <td>{{this.price}}</td>

            <td class="action-buttons">
              <button class="btn"
                onclick="openEditProductModal('{{this._id}}','{{this.name}}','{{this.description}}','{{this.price}}','{{this.material}}','{{this.stock}}','{{this.category.name}}',[{{#each this.images}}'{{this}}'{{#unless @last}},{{/unless}}{{/each}}])">Edit</button>

              {{#if this.isListed}}
              <form action="/admin/productManagement/unlist/{{this._id}}" method="POST">
                <button type="submit" class="btn unblock-btn">Unlist</button>
              </form>
              {{else}}
              <form action="/admin/productManagement/list/{{this._id}}" method="POST">
                <button type="submit" class="btn block-btn">List</button>
              </form>
              {{/if}}
            </td>


          </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
  </section>
  {{else}}
<div class="no-results ">
        <div class="icon">üîç</div>
        <div class="message">No results found</div>
        <div class="sub-message">Try adjusting your search to find what you're looking for.</div>
    </div>

  {{/if}}
</div>

{{!-- aDD product modal --}}


<div class="modal" id="addProductModal" style="display: none;">
  <div class="modal-content">
    <span class="close" onclick="closeProductModal()">&times;</span>
    <h2>Add Product</h2>
    <form id="addProductForm" action="/admin/product/add" method="POST" enctype="multipart/form-data">

      <label for="productName">Product Name:</label>
      <input type="text" id="productName" name="name" required />

      <label for="productDescription">Description:</label>
      <textarea id="productDescription" name="description" rows="4" required></textarea>

      <label for="productPrice">Price:</label>
      <input type="number" id="productPrice" name="price" required />

      <label for="productCategory">Category:</label>
      <select id="productCategory" name="category" required>
        <option value="">Select a category</option>
        {{#each categories}}
        <option value="{{this._id}}">{{this.name}}</option>
        {{/each}}
      </select>

      <label for="productMaterial">Material:</label>
      <input type="text" id="productMaterial" name="material" required />

      <label for="productStock">Stock:</label>
      <input type="number" id="productStock" name="stock" required />

      <label for="productImage" class="file-upload-label">Choose Images:</label>
      <input type="file" id="productImage" name="images" accept="image/*" multiple />
      <div id="image-preview-container"></div>

      <div class="modal" id="imageCropperModal" style="display:none;">
        <div class="modal-content">
          <span class="close" onclick="closeCropperModal()">&times;</span>
          <img id="cropperImage" style="max-width:100%;" />
          <button id="cropButton" type="button">Crop</button>
        </div>
      </div>

      <input type="hidden" id="croppedImagesInput" name="croppedImages">
      <button type="submit" class="btn">Add Product</button>
    </form>
  </div>
</div>

{{!-- add prodcut modal ends --}}
{{!-- Edit Modal --}}

<div class="modal" id="editProductModal" style="display:none;">
  <div class="modal-content">
    <span class="close" onclick="closeEditProductModal()">&times;</span>
    <h2>Edit Product</h2>
    <form id="editProductForm" method="POST" enctype="multipart/form-data" onsubmit="submitEditProductForm(event)">
      <label for="productName">Product Name:</label>
      <input type="text" id="editProductName" name="name" value="{{this.name}}" required />

      <label for="productDescription">Description:</label>
      <textarea id="editProductDescription" name="description" rows="4" required>{{this.description}}</textarea>

      <label for="productPrice">Price:</label>
      <input type="number" id="editProductPrice" name="price" value="{{this.price}}" required />

      <label for="productCategory">Category:</label>
      <select id="editProductCategory" name="category" required>
        {{#each categories}}
   <option value="{{this._id}}" {{#if (eq this.name ../selectedCategory)}}selected{{/if}}>{{this.name}}</option>

        {{/each}}
      </select>

      <label for="productMaterial">Material:</label>
      <input type="text" id="editProductMaterial" name="material" value="{{this.material}}" required />

      <label for="productStock">Stock:</label>
      <input type="number" id="editProductStock" name="stock" value="{{this.stock}}" required />
      <input type="text" id="productId" value="{{this._id}}" hidden>
      <label for="productImage" class="file-upload-label">Update Images:</label>
<input type="file" name="images" id="editProductImage" multiple />

   <div id="image-preview-container">
  <p>Existing Images:</p>
  <div id="existing-images" style="display: flex; flex-wrap: wrap;"></div>
</div>
<input type="hidden" id="updatedImages" name="updatedImages" />


      <button type="submit" class="btn" id="submit-btn">Update Product</button>
    </form>
  </div>
</div>
{{!-- Edit Modal Ends --}}



{{!-- pagination --}}

  <nav id="pagination" aria-label="Page navigation">
    <ul class="pagination justify-content-center pages custom-pagination">
        {{#if previousPage}}
        <li class="page-item">
            <a class="page-link" href="?page={{previousPage}}" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        {{/if}}

        {{#each (range 1 totalPages)}}
        <li class="page-item {{#if (isEqual this ../currentPage)}}active{{/if}}">
            <a class="page-link" href="?page={{this}}">{{this}}</a>
        </li>
        {{/each}}

        {{#if nextPage}}
        <li class="page-item">
            <a class="page-link" href="?page={{nextPage}}" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
        {{/if}}
    </ul>
</nav>


  {{!-- end pagination --}}

{{!-- cropper js --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>


<script>
  function openProductModal() {
    document.getElementById("addProductModal").style.display = "block";
  }

  function closeProductModal() {
    document.getElementById("addProductModal").style.display = "none";
  }

  function closeCropperModal() {
    document.getElementById('imageCropperModal').style.display = 'none';
  }
  let cropper;
  let croppedImages = [];
  let currentImageIndex = 0;
  let currentImageElement = null; 

  document.getElementById('productImage').addEventListener('change', function (event) {
    const files = event.target.files;
    const previewContainer = document.getElementById('image-preview-container');
    previewContainer.innerHTML = ''; 
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const reader = new FileReader();

      reader.onload = function (e) {
     
        const imageContainer = document.createElement('div');
        imageContainer.style.display = 'flex';
        imageContainer.style.flexDirection = 'column'; 

        const image = new Image();
        image.src = e.target.result;
        image.style.maxWidth = '200px';
        image.style.margin = '10px';

        const changeImageBtn = document.createElement("button");
        changeImageBtn.textContent = "Change Image";
        changeImageBtn.classList.add("btn", "btn-warning", "w-50", "btn-sm", "m-2");
        changeImageBtn.addEventListener("click", function () {
          const fileInput = document.createElement('input');
          fileInput.type = 'file';
          fileInput.accept = 'image/*';
          fileInput.click();

          fileInput.onchange = function (e) {
            const newFile = e.target.files[0];
            if (newFile && newFile.type.startsWith('image/')) {
              const newReader = new FileReader();
              newReader.onload = function (event) {
                image.src = event.target.result; 
              };
              newReader.readAsDataURL(newFile);
            } else {
              alert("Invalid image file");
            }
          };
        });

        const deleteImageBtn = document.createElement("button");
        deleteImageBtn.textContent = "Delete Image";
        deleteImageBtn.classList.add("btn", "btn-danger", "w-50", "btn-sm", "m-2");
        deleteImageBtn.addEventListener("click", function () {
          previewContainer.removeChild(imageContainer); 
        });

        imageContainer.appendChild(image);
        imageContainer.appendChild(changeImageBtn);
        imageContainer.appendChild(deleteImageBtn);

        previewContainer.appendChild(imageContainer);

        image.addEventListener('click', function () {
          const cropperModal = document.getElementById('imageCropperModal');
          const cropperImage = document.getElementById('cropperImage');
          cropperImage.src = e.target.result;
          cropperModal.style.display = 'block';
          currentImageIndex = i;
          currentImageElement = image; 
          if (cropper) {
            cropper.destroy();
          }

          cropper = new Cropper(cropperImage, {
            aspectRatio: 1 / 1,  
            viewMode: 1
          });
        });
      };

      reader.readAsDataURL(file);
    }
  });

  document.getElementById('cropButton').addEventListener('click', function () {
    if (cropper) {
      const croppedCanvas = cropper.getCroppedCanvas();
      if (croppedCanvas) {
        const croppedImageURL = croppedCanvas.toDataURL('image/jpeg');

        croppedImages[currentImageIndex] = croppedImageURL;

        const croppedImage = new Image();
        croppedImage.src = croppedImageURL;
        croppedImage.style.maxWidth = '200px';
        croppedImage.style.margin = '10px';

        if (currentImageElement) {
          currentImageElement.src = croppedImageURL; 
        }

        document.getElementById('imageCropperModal').style.display = 'none';
        cropper.destroy();
        cropper = null;
      }
    }
  });

  document.getElementById('closeModalButton').addEventListener('click', function () {
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }
    document.getElementById('imageCropperModal').style.display = 'none';
  });


  // edit modal function  

 // Function to open the edit product modal
function openEditProductModal(id, name, description, price, material, stock, category, images) {
  document.getElementById('editProductName').value = name;
  document.getElementById('editProductDescription').value = description;
  document.getElementById('editProductPrice').value = price;
  document.getElementById('editProductMaterial').value = material;
  document.getElementById('editProductStock').value = stock;
  document.getElementById('editProductCategory').value = category;
  document.getElementById('productId').value = id;
  console.log("the product id is ",id)

  const existingImagesContainer = document.getElementById('existing-images');
  existingImagesContainer.innerHTML = ''; 

  images.forEach((image, index) => {
    const imgWrapper = document.createElement('div');
    imgWrapper.style.margin = '5px';
    imgWrapper.style.position = 'relative';

    const imgElement = document.createElement('img');
    imgElement.src = `/uploads/${image}`;
    imgElement.alt = `Product Image ${index + 1}`;
    imgElement.style.width = '100px';
    imgElement.style.height = '100px';
    imgElement.style.objectFit = 'cover';

    const changeBtn = document.createElement('button');
    changeBtn.textContent = 'Change Image';
    changeBtn.style.marginTop = '5px';
    changeBtn.style.display = 'block';
    changeBtn.style.cursor = 'pointer';

    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.style.display = 'none'; // Hidden by default
    fileInput.accept = 'image/*';

    // Handle file selection
    fileInput.addEventListener('change', (event) => {
      event.preventDefault();
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          imgElement.src = e.target.result; // Update preview
        };
        reader.readAsDataURL(file);
        // Replace the old file with the new one in the form
        images[index] = file; 
      }
    });

    changeBtn.addEventListener('click', () => fileInput.click());

    imgWrapper.appendChild(imgElement);
    imgWrapper.appendChild(changeBtn);
    imgWrapper.appendChild(fileInput);
    existingImagesContainer.appendChild(imgWrapper);
  });

  document.getElementById('editProductModal').style.display = 'block';
}

function closeEditProductModal() {
  const modal = document.getElementById('editProductModal');
  if (modal) {
    modal.style.display = 'none';
  }
}

// Attach event listener to the edit product form
const editForm = document.getElementById('editProductForm');
if (editForm) {
  editForm.addEventListener('submit', submitEditProductForm);
} else {
  console.error('Edit product form not found in the DOM.');
}

// Function to handle form submission
function submitEditProductForm(e) {
  e.preventDefault();

  const formData = new FormData();
  formData.append('name', document.getElementById('editProductName').value);
  formData.append('description', document.getElementById('editProductDescription').value);
  formData.append('price', document.getElementById('editProductPrice').value);
  formData.append('material', document.getElementById('editProductMaterial').value);
  formData.append('stock', document.getElementById('editProductStock').value);
  formData.append('category', document.getElementById('editProductCategory').value);

  // Attach updated images to the formData
  const existingImagesContainer = document.getElementById('existing-images');
  if (existingImagesContainer) {
    const fileInputs = existingImagesContainer.querySelectorAll('input[type="file"]');
    fileInputs.forEach((input, index) => {
      if (input.files[0]) {
        formData.append(`images`, input.files[0]);
      }
    });
  }

  const id = document.getElementById('productId').value;
  fetch(`/admin/product/edit/${id}`, {
    method: 'POST',
    body: formData,
  })
    .then((response) => {
      if (response.ok) {
        closeEditProductModal();
        window.location.href = '/admin/productManagement';
      } else {
        return response.json().then((data) => {
          alert(`Failed to update product: ${data.message || 'Unknown error'}`);
        });
      }
    })
    .catch((error) => {
      console.error('Error:', error);
    });
}



</script>